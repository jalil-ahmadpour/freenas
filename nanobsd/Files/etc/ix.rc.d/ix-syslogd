#!/bin/sh
#
# $FreeBSD$
#

# PROVIDE: ix-syslogd
# REQUIRE: zfs
# BEFORE: syslogd

. /etc/rc.freenas

generate_syslog_conf()
{
	local IFS="|"
	local f="stg_syslogserver"
	eval local $f
	local sf=$(var_to_sf $f)

	cp /conf/base/etc/syslog.conf /etc/syslog.conf

	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	SELECT
		$sf

	FROM
		system_settings

	ORDER BY
		-id

	LIMIT 1
	" | \
	while eval read -r $f; do
		if [ -n "${stg_syslogserver}" ]; then
			echo -e "*.*\t@${stg_syslogserver}" >> /etc/syslog.conf
		fi
	done
}

use_syslog_dataset()
{
	local use

	if ! is_freenas
	then
		return 1
	fi

	use="$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	SELECT
		sys_syslog_usedataset
	FROM
		system_systemdataset
	ORDER BY
		-id
	LIMIT 1
	" | \
	while read -r syslog_usedataset
	do
		if [ "${syslog_usedataset}" = "0" ]
		then
			echo "1"
		else
			local failover="$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "select count(*) from system_failover" 2> /dev/null)"
			if [ -n "${failover}" ] && [ ${failover} -gt 0 ]; then
				echo "1"
			else
				echo "0"
			fi
		fi
	done
	)"

	return ${use}
}

get_system_dataset()
{

	if [ -L "${FREENAS_SYSTEMDATASET}" -a -e "${FREENAS_SYSTEMDATASET}" ]
	then
		echo "$(realpath ${FREENAS_SYSTEMDATASET})"
	else
		return 1
	fi

	return 0
}

get_syslog_dataset()
{
	local system_dataset="$(get_system_dataset)"

	if [ -n "${system_dataset}" ]
	then
		echo "${system_dataset}/syslog"
	fi
}

ix_syslogd_start()
{
	generate_syslog_conf

	if ! use_syslog_dataset
	then
		if [ -L "/var/log" ]
		then
			local rp="$(realpath -q /var/log)"
			if [ -z "${rp}" ]
			then
				rm -f /var/log
				mkdir -p /var/log
			else
				local datestr="$(date +'%Y%m%d%H%M%S')"
				rm -f /var/log
				mv "/var/log" "/var/log.${datestr}"
				mkdir -p /var/log
			fi
		fi
		return 0
	fi

	local mp="$(get_syslog_dataset)"

	if [ -z "${mp}" ]
	then
		if [ -L "/var/log" ]
		then
			local rp="$(realpath -q /var/log)"
			if [ -z "${rp}" ]
			then
				rm -f /var/log
				mkdir -p /var/log
			else
				local datestr="$(date +'%Y%m%d%H%M%S')"
				rm -f /var/log
				mv "/var/log" "/var/log.${datestr}"
				mkdir -p /var/log
			fi
		fi

		return 0
	fi

	#
	#	log directory exists, pick up any new files or
	#	directories and create them. Existing files will be
	#	appended. This is done this way so that ownership and
	#	permissions are always preserved.
	#
	if [ -d "${mp}/log" ]
	then

		#
		#	Pick up any new directories and sync them
		#
		if [ ! -L /var/log ]; then
			for dir in $(find /var/log/ -type d)
			do
				local dst="${mp}/log/${dir#/var/log/}"
				if [ ! -d "${dst}" ]
				then
					/usr/local/bin/rsync -avz ${dir}/* ${dst}/ >/dev/null 2>&1
				fi
			done

		fi

		#
		#	Find all files that are not a directory and see if
		#	they exist. If the file exists already, append to
		#	it, otherwise, copy it over.
		#
		if [ ! -L /var/log ]; then
			for file in $(find /var/log/ ! -type d)
			do
				local dst="${mp}/log/${file#/var/log/}"
				if [ ! -f "${dst}" ]
				then
					cp -p ${file} ${dst}
				else
					cat ${file} >> ${dst}
				fi
			done
		fi

	#
	#	This is the first time syslog is going to log to this
	#	directory, so create the log directory and sync files.
	#
	else
		mkdir -p ${mp}/log
		chmod 755 ${mp}/log
		chown root:wheel ${mp}/log

		/usr/local/bin/rsync -avz /var/log/* ${mp}/log/ >/dev/null 2>&1
	fi

	if [ ! -L "/var/log" -o ! -e "/var/log" ]
	then
		local datestr="$(date +'%Y%m%d%H%M%S')"
		mv "/var/log" "/var/log.${datestr}"
		ln -s "${mp}/log" "/var/log"
	fi

	return 0
}

name="ix-syslogd"
start_cmd='ix_syslogd_start'
stop_cmd=':'
        
load_rc_config $name
run_rc_command "$1"
